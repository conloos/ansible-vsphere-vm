---
- name: Set vm parameter
  community.vmware.vmware_guest:
    hostname: "{{ vcenter_hostname }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password }}"
    validate_certs: "{{ vcenter_validate_certs }}"
    datacenter: "{{ vcenter_datacenter }}"
    name: "{{ cloudinit_fqdn }}"
    hardware:
      memory_mb: "{{ vm_hw_ram_mb }}"
      num_cpus: "{{ vm_hw_cpu_n }}"
      scsi: "{{ vm_hw_scsi }}"
      hotadd_cpu: true
      hotremove_cpu: true
      hotadd_memory: true
    networks:
      - name: "{{ vm_net_name }}"
        device_name: "{{ vm_net_device_type }}"
        device_type: vmxnet3
      # Example static
      # - name: "{{ vm_net_name }}"
      #   device_name: "{{ vm_net_device_type }}"
      #   type: static
      #   device_type: vmxnet3
      #   ip: “{{ cloudinit_network_raw['ethernets']['eth0']['addresses'][0] | split('/') | first }}”
      #   netmask: “{{ cloudinit_network_raw['ethernets']['eth0']['addresses'][0] | split('/') | last }}”
      #   dns_servers: “{{ cloudinit_network_raw['ethernets']['eth0']['nameservers']['addresses'] }}”
      #   gateway: “{{ cloudinit_network_raw['ethernets']['eth0']['gateway4'] }}”
      #   register: static_vm
      #   when: network_type == 'static'
      #   wait_for_ip_address: yes
      #
      # Example DHCP
      #  - name: "{{ vm_net_name }}"
      #    device_name: "{{ vm_net_device_type }}"
      #    type: dhcp
      #   wait_for_ip_address: yes
    annotation: “{{ vm_notes | default('Provisioned by ansible') }}”
  delegate_to: localhost
  when: "'.ova' in ci_image_name"
...
